logxx <- apply(xx, 2, function(y){log(y + 0.1)})
stan_logxx <- t(apply(logxx, 1, function(y){(y-mean(y))/sd(y)}))
data <- logxx[round(runif(num)*p), ]
zero.matrix <- xx != 0
imputed <- logxx
weights.list <- list(NULL)
outlier.list <- NULL
remain <- data[, -j]
res <- fitting_lasso(data[, j], remain)
coeff <- res$coeff
selected <- res$selected
selected
prior.weight <- calculate_weights(logxx[flag, j], logxx[flag, -j][, selected])
sub.selected <- selected[prior.weight >= 10^-4]
sub.prior.weight <- prior.weight[prior.weight >= 10^-4]
sub.prior.weight <- sub.prior.weight/sum(sub.prior.weight)
c(1:n)[-j][sub.selected]
colnames(gene.expression)[c(1:n)[-j][sub.selected]]
data <- logxx#logxx[round(runif(num)*p), ]
remain <- data[, -j]
res <- fitting_lasso(data[, j], remain)
coeff <- res$coeff
selected <- res$selected
selected
prior.weight <- calculate_weights(logxx[flag, j], logxx[flag, -j][, selected])
sub.selected <- selected[prior.weight >= 10^-4]
sub.prior.weight <- prior.weight[prior.weight >= 10^-4]
sub.prior.weight <- sub.prior.weight/sum(sub.prior.weight)
c(1:n)[-j][sub.selected]
colnames(gene.expression)[c(1:n)[-j][sub.selected]]
num = 5000
xx <- gene.expression # p*n
p <- nrow(xx)
n <- ncol(xx)
zero.rate <- apply(xx, 1, function(x){length(x[x == 0])})/n
flag <-  zero.rate <= percentage.cutoff
logxx <- apply(xx, 2, function(y){log(y + 0.1)})
stan_logxx <- t(apply(logxx, 1, function(y){(y-mean(y))/sd(y)}))
data <- logxx[round(runif(num)*p), ]
zero.matrix <- xx != 0
remain <- data[, -j]
res <- fitting_lasso(data[, j], remain)
coeff <- res$coeff
selected <- res$selected
prior.weight <- calculate_weights(logxx[flag, j], logxx[flag, -j][, selected])
sub.selected <- selected[prior.weight >= 10^-4]
sub.prior.weight <- prior.weight[prior.weight >= 10^-4]
sub.prior.weight <- sub.prior.weight/sum(sub.prior.weight)
weights.list[[j]] <- cbind(c(1:n)[-j][sub.selected], sub.prior.weight)
a1 <- quantify(weights.list[[j]], logxx)
plot(logxx[,1], a1)
a1 <- logxx[flag, j]
b1 <- logxx[flag, -j][, selected]
flag <- a1 < 6 &a1 > 4
prior.weight <- calculate_weights(a1[flag], b1[flag, ])
sub.selected <- selected[prior.weight >= 10^-4]
sub.prior.weight <- prior.weight[prior.weight >= 10^-4]
sub.prior.weight <- sub.prior.weight/sum(sub.prior.weight)
weights.list[[j]] <- cbind(c(1:n)[-j][sub.selected], sub.prior.weight)
a1 <- quantify(weights.list[[j]], logxx)
plot(logxx[,1], a1)
a1 <- logxx[flag, j]
b1 <- logxx[flag, -j][, selected]
flag <- a1 < 4
prior.weight <- calculate_weights(a1[flag], b1[flag, ])
sub.selected <- selected[prior.weight >= 10^-4]
sub.prior.weight <- prior.weight[prior.weight >= 10^-4]
sub.prior.weight <- sub.prior.weight/sum(sub.prior.weight)
weights.list[[j]] <- cbind(c(1:n)[-j][sub.selected], sub.prior.weight)
a1 <- quantify(weights.list[[j]], logxx)
plot(logxx[,1], a1)
a2 <- quantify.mean(weights.list[[j]], logxx)
plot(logxx[,1], a2)
flag <- a1 < 2
prior.weight <- calculate_weights(a1[flag], b1[flag, ])
a1 <- logxx[flag, j]
b1 <- logxx[flag, -j][, selected]
flag <- a1 < 2
prior.weight <- calculate_weights(a1[flag], b1[flag, ])
sub.selected <- selected[prior.weight >= 10^-4]
sub.prior.weight <- prior.weight[prior.weight >= 10^-4]
sub.prior.weight <- sub.prior.weight/sum(sub.prior.weight)
weights.list[[j]] <- cbind(c(1:n)[-j][sub.selected], sub.prior.weight)
a1 <- quantify(weights.list[[j]], logxx)
plot(logxx[,1], a1)
exp(2)
exp(4)
load("/project/mengjiechen/singlecell/data/Chu/GSE75748_sc_cell_type.rda")
percentage.cutoff = 0.1
num = 5000
ImputeAll = TRUE
gc <- selected.GC[, 4]
psi = 10
gamma = 0.8
steps = 100
down = 0.1
library(Imputation)
load("/Users/mengjiechen/Downloads/Chu/GSE75748_sc_cell_type.rda")
percentage.cutoff = 0.1
num = 500
ImputeAll = TRUE
gc <- selected.GC[, 4]
psi = 10
gamma = 0.8
steps = 100
down = 0.1
minbool = FALSE
percentage.samples = 0.8
gene.expression <- gene.expression[1:2000, 1:500]
xx <- gene.expression # p*n
p <- nrow(xx)
n <- ncol(xx)
zero.rate <- apply(xx, 1, function(x){length(x[x == 0])})/n
flag <- zero.rate <= percentage.cutoff
which_flag <- which(flag)
logxx <- apply(xx, 2, function(y){log(y + 0.1)})
data <- logxx[round(runif(num)*p), ]
data.copy2 <- t(logxx[flag, round(runif(round(percentage.samples*n))*n)])
zero.matrix <- xx != 0
zero.matrix <- apply(zero.matrix, 2, as.numeric)
selected_logxx <- logxx[flag, ]
res_imp <- imputation_by_samples(data, selected_logxx, logxx, zero.matrix, n, p, minbool)
outlier_flag <- apply(res_imp$sample_weights, 1, function(x){any(x == -1)})
outliers <- c(1:n)[outlier_flag]
outliers
imputed <- res_imp$imputed
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
sum(imputed.gene$imputed_gene - imputed)
gene.expression <- gene.expression[1:5000, 1:500]
xx <- gene.expression # p*n
p <- nrow(xx)
n <- ncol(xx)
zero.rate <- apply(xx, 1, function(x){length(x[x == 0])})/n
flag <- zero.rate <= percentage.cutoff
which_flag <- which(flag)
logxx <- apply(xx, 2, function(y){log(y + 0.1)})
data <- logxx[round(runif(num)*p), ]
data.copy2 <- t(logxx[flag, round(runif(round(percentage.samples*n))*n)])
zero.matrix <- xx != 0
zero.matrix <- apply(zero.matrix, 2, as.numeric)
selected_logxx <- logxx[flag, ]
res_imp <- imputation_by_samples(data, selected_logxx, logxx, zero.matrix, n, p, minbool)
outlier_flag <- apply(res_imp$sample_weights, 1, function(x){any(x == -1)})
outliers <- c(1:n)[outlier_flag]
imputed <- res_imp$imputed
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
load("/Users/mengjiechen/Downloads/Chu/GSE75748_sc_cell_type.rda")
percentage.cutoff = 0.1
num = 500
ImputeAll = TRUE
gc <- selected.GC[, 4]
psi = 10
gamma = 0.8
steps = 100
down = 0.1
minbool = FALSE
percentage.samples = 0.8
gene.expression <- gene.expression[1:5000, 1:500]
xx <- gene.expression # p*n
p <- nrow(xx)
n <- ncol(xx)
zero.rate <- apply(xx, 1, function(x){length(x[x == 0])})/n
flag <- zero.rate <= percentage.cutoff
which_flag <- which(flag)
logxx <- apply(xx, 2, function(y){log(y + 0.1)})
data <- logxx[round(runif(num)*p), ]
data.copy2 <- t(logxx[flag, round(runif(round(percentage.samples*n))*n)])
zero.matrix <- xx != 0
zero.matrix <- apply(zero.matrix, 2, as.numeric)
selected_logxx <- logxx[flag, ]
res_imp <- imputation_by_samples(data, selected_logxx, logxx, zero.matrix, n, p, minbool)
outlier_flag <- apply(res_imp$sample_weights, 1, function(x){any(x == -1)})
outliers <- c(1:n)[outlier_flag]
imputed <- res_imp$imputed
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
sum(imputed.gene$imputed_gene - imputed)
library(Imputation)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
res <- list(res_imp, outliers = outliers, imputed.by.gene = imputed.gene)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
dim(imputed)
dim(imputed)
dim(data_copy2)
dim(data.copy2)
install.packages(c("Rcpp", "RcppArmadillo", "quadprog"))
library(Imputation)
load("/Users/mengjiechen/Downloads/Chu/GSE75748_sc_cell_type.rda")
percentage.cutoff = 0.1
num = 500
ImputeAll = TRUE
gc <- selected.GC[, 4]
psi = 10
gamma = 0.8
steps = 100
down = 0.1
minbool = FALSE
percentage.samples = 0.8
gene.expression <- gene.expression[1:5000, 1:500]
xx <- gene.expression # p*n
p <- nrow(xx)
n <- ncol(xx)
zero.rate <- apply(xx, 1, function(x){length(x[x == 0])})/n
flag <- zero.rate <= percentage.cutoff
which_flag <- which(flag)
logxx <- apply(xx, 2, function(y){log(y + 0.1)})
data <- logxx[round(runif(num)*p), ]
data.copy2 <- t(logxx[flag, round(runif(round(percentage.samples*n))*n)])
zero.matrix <- xx != 0
zero.matrix <- apply(zero.matrix, 2, as.numeric)
selected_logxx <- logxx[flag, ]
res_imp <- imputation_by_samples(data, selected_logxx, logxx, zero.matrix, n, p, minbool)
outlier_flag <- apply(res_imp$sample_weights, 1, function(x){any(x == -1)})
outliers <- c(1:n)[outlier_flag]
imputed <- res_imp$imputed
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
install.packages("glmnet")
library(Imputation)
xx <- gene.expression # p*n
p <- nrow(xx)
n <- ncol(xx)
zero.rate <- apply(xx, 1, function(x){length(x[x == 0])})/n
flag <- zero.rate <= percentage.cutoff
which_flag <- which(flag)
logxx <- apply(xx, 2, function(y){log(y + 0.1)})
data <- logxx[round(runif(num)*p), ]
data.copy2 <- t(logxx[flag, round(runif(round(percentage.samples*n))*n)])
zero.matrix <- xx != 0
zero.matrix <- apply(zero.matrix, 2, as.numeric)
selected_logxx <- logxx[flag, ]
res_imp <- imputation_by_samples(data, selected_logxx, logxx, zero.matrix, n, p, minbool)
outlier_flag <- apply(res_imp$sample_weights, 1, function(x){any(x == -1)})
outliers <- c(1:n)[outlier_flag]
imputed <- res_imp$imputed
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
dim(imputed)
dim(data.copy2)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
str(imputed.gene)
tail(imputed.gene$gene_weights_1)
str(res_imp)
pair.flag <- imputed.gene$gene_weights_1!=0
table(pair.flag)
gene_weights <- cbind(imputed.gene$gene_weights_1[pair.flag], imputed.gene$gene_weights_2[pair.flag],
imputed.gene$gene_weights_3[pair.flag])
head(  gene_weights)
dim(  gene_weights)
gene_weights
tail(gene_weights)
gene_weights <- cbind(imputed.gene$gene_weights_1[pair.flag] + 1, imputed.gene$gene_weights_2[pair.flag] + 1
res <- list(sample_weights = res_imp$sample_weights, imputed = res_imp$imputed,
outliers = outliers, imputed.by.gene = imputed.gene$imputed_gene)
return(res)
}
reweighting_with_bulk <- function(prior, meanY, sdY = NULL, Yflag){
k <- length(Y)
zero_rate <- length(Yflag[Yflag == 0])/k
if(zero_rate < 0.9){
if(is.null(sdY)) sdY <- 1
pN <- dnorm(0, meanY, sdY)
non.dropout <- (1-zero_rate)*pN/(zero_rate + (1-zero_rate)*pN)
zero_vec <- rep(1, k)
zero_vec[Yflag == 0] <- non.dropout
xx <- prior*zero_vec
return(xx/sum(xx))
} else {
return(prior/sum(prior))
}
}
Imputation4 <- function(gene.expression, bulk, sample.id.in.bulk, percentage.cutoff = 0.1, num = 5000,  minbool = FALSE){
xx <- gene.expression # p*n
p <- nrow(xx)
n <- ncol(xx)
zero.rate <- apply(xx, 1, function(x){length(x[x == 0])})/n
flag <-  zero.rate <= percentage.cutoff
logxx <- apply(xx, 2, function(y){log(y + 0.1)})
data <- logxx[round(runif(num)*p), ]
zero.matrix <- xx != 0
zero.matrix <- apply(zero.matrix, 2, as.numeric)
t_logxx <- t(logxx)
t_zero.matrix <- t(zero.matrix)
imputed <- logxx
weights.list <- list(NULL)
outlier.list <- NULL
for(j in 1:n){
remain <- data[, -j]
res <- fitting_lasso(data[, j], remain)
coeff <- res$coeff
selected <- res$selected
if(length(selected) < 3){
weights.list[[j]] <- cbind(c(1:n)[-j][selected], rep(1, length(selected)))
outlier.list <- c(outlier.list, j)
} else {
prior.weight <- calculate_weights(logxx[flag, j], logxx[flag, -j][, selected])
sub.selected <- selected[prior.weight >= 10^-4]
sub.prior.weight <- prior.weight[prior.weight >= 10^-4]
sub.prior.weight <- sub.prior.weight/sum(sub.prior.weight)
weights.list[[j]] <- cbind(c(1:n)[-j][sub.selected], sub.prior.weight)
Ymat <- t_logxx[-j, ][sub.selected, ]
Yflagmat <- t_zero.matrix[-j, ][sub.selected, ]
if(is.null(sample.id.in.bulk[[j]])){
tt <- reweighting_sum_C(Ymat, Yflagmat, logxx[, j], zero.matrix[, j], sub.prior.weight, TRUE)
} else {
if(length(sample.id.in.bulk[[j]]) > 1){
meanB <- apply(bulk[, sample.id.in.bulk[[j]]], 1, mean)
sdB <- apply(bulk[, sample.id.in.bulk[[j]]], 1, sd)
} else {
meanB <- bulk[, sample.id.in.bulk[[j]]]
sdB <- rep(1, p)
}
tt <- reweighting_with_bulk_C(Ymat, Yflagmat, meanY, sdY, prior_weight)
}
imputed[, j] <- tt
}
}
res <- list(weights.list = weights.list, imputed = imputed, outlier.list = outlier.list)
return(res)
}
gene_weights <- cbind(imputed.gene$gene_weights_1[pair.flag] + 1, imputed.gene$gene_weights_2[pair.flag] + 1,
imputed.gene$gene_weights_3[pair.flag])
head(  gene_weights)
tail(gene_weights)
rownames(gene.expression)[c(2117, 976, 1023, 1651, 1726)]
rownames(gene.expression)[c(18,773,885,1060)]
rownames(gene.expression)[c(49, 618, 978)]
plot(logxx[49, ], logxx[618, ])
plot(logxx[49, ], logxx[978, ])
plot(logxx[48, ], logxx[977, ])
dim(logxx)
plot(logxx[49, ], logxx[978, ])
plot(logxx[2117, ], logxx[976, ])
cor(logxx[2117, ], logxx[976, ])
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
pair.flag <- imputed.gene$gene_weights_1!=0
gene_weights <- cbind(imputed.gene$gene_weights_1[pair.flag] + 1, imputed.gene$gene_weights_2[pair.flag] + 1,
imputed.gene$gene_weights_3[pair.flag])
head( gene_weights)
plot(logxx[18,],logxx[1745,])
plot(logxx[18,],logxx[2039,])
plot(logxx[17,],logxx[1744,])
corv
cor(logxx[18,],logxx[1745,])
log(1.5)
dim(imputed)
dim(logxx)
max(gene_weights[,2])
tttttt <- cor(logxx[18,], logxx)
length(which_flag)
tail(gene_weights)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
pair.flag <- imputed.gene$gene_weights_1!=0
gene_weights <- cbind(imputed.gene$gene_weights_1[pair.flag], imputed.gene$gene_weights_2[pair.flag],
imputed.gene$gene_weights_3[pair.flag])
head(gene_weights)
plot(logxx[18,], logxx[1745,])
plot(logxx[18,], logxx[1744,])
plot(logxx[18,], logxx[1743,])
plot(logxx[18,], logxx[1741,])
plot(logxx[18,], logxx[1740,])
plot(logxx[18,], logxx[1745,])
dim(data.copy2)
tt <- NULL
for(i in 1:5000){
tt <- c(tt, cor(logxx[18, ], logxx[i, ]))
}
i
which(tt > 0.8)
which(tt > 0.75)
hist(tt)
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
which_flag[47]
which_flag[772]
which_flag[884]
which_flag[885]
which_flag[886]
plot(logxx[18, ], logxx[2027, ])
plot(logxx[18, ], logxx[2036, ])
plot(logxx[18, ], logxx[2039, ])
plot(data.copy2[, 18], data.copy2[, 47])
plot(data.copy2[, 18], data.copy2[, 48])
plot(data.copy2[, 18], data.copy2[, 47])
plot(data.copy2[, 18], data.copy2[, 772])
plot(data.copy2[, 18], data.copy2[, 773])
cor(data.copy2[, 18], data.copy2[, 773])
cor(data.copy2[, 18], data.copy2[, 774])
cor(data.copy2[, 18], data.copy2[, 775])
plot(data.copy2[, 18], data.copy2[, 774])
plot(data.copy2[, 18], data.copy2[, 49])
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
plot(data.copy2[, 18], data.copy2[, 774])
which_flag[774]
plot(logxx[18, ], logxx[1745, ])
plot(logxx[18, ], logxx[1746, ])
plot(logxx[18, ], logxx[1745, ])
plot(logxx[18, ], logxx[1744, ])
head(which_flag)
head(data.copy2[, 773:778])
head(logxx[1743:1745, 1:5])
plot(logxx[18, ], logxx[1745, ])
cor(logxx[18, ], logxx[1745, ])
cor(logxx[18, round(runif(round(percentage.samples*n))*n)], logxx[1745, round(runif(round(percentage.samples*n))*n)])
sample.flag <- round(runif(round(percentage.samples*n))*n)
data.copy2 <- t(logxx[flag, sample.flag])
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
cor(logxx[18, sample.flag], logxx[1745, sample.flag])
logxx[1745,1:10]
logxx[1744:1745,1:10]
data.copy2[1:10, 773:774]
logxx[1744:1745,sample.flag[1:10]]
plot(data.copy2[, 774], data.copy2[,18])
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
plot(logxx[36,],logxx[774,])
plot(logxx[,36],logxx[, 774])
dim(logxx)
plot(logxx[36, ],logxx[774, ])
plot(logxx[36, ],logxx[773, ])
plot(logxx[35, ],logxx[773, ])
plot(logxx[36, ],logxx[774, ])
plot(logxx[36, ],logxx[1745, ])
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
pair.flag <- imputed.gene$gene_weights_1!=0
gene_weights <- cbind(imputed.gene$gene_weights_1[pair.flag], imputed.gene$gene_weights_2[pair.flag],
imputed.gene$gene_weights_3[pair.flag])
head(gene_weights)
plot(logxx[95, ], logxx[2247, ])
plot(logxx[95, ], logxx[1422, ])
tail(gene_weights)
plot(logxx[471, ], logxx[4960, ])
plot(logxx[2196, ], logxx[4960, ])
library(Imputation)
imputed.gene <- imputation_by_genes(imputed, data.copy2, which_flag-1)
pair.flag <- imputed.gene$gene_weights_1!=0
gene_weights <- cbind(imputed.gene$gene_weights_1[pair.flag], imputed.gene$gene_weights_2[pair.flag],
imputed.gene$gene_weights_3[pair.flag])
res <- list(sample_weights = res_imp$sample_weights, imputed = res_imp$imputed,
outliers = outliers, imputed.by.gene = imputed.gene$imputed_gene,
gene_weights = gene_weights)
tail(gene_weights)
plot(logxx[4711, ], logxx[1861, ])
system.time(test3 <- Imputation3_cpp(gene.expression, percentage.cutoff, num, percentage.samples))
library(Imputation)
load("/Users/mengjiechen/Downloads/Chu/GSE75748_sc_cell_type.rda")
percentage.cutoff = 0.1
num = 500
ImputeAll = TRUE
gc <- selected.GC[, 4]
psi = 10
gamma = 0.8
steps = 100
down = 0.1
minbool = FALSE
percentage.samples = 0.8
gene.expression <- gene.expression[1:5000, 1:500]
xx <- gene.expression # p*n
p <- nrow(xx)
n <- ncol(xx)
zero.rate <- apply(xx, 1, function(x){length(x[x == 0])})/n
flag <-  zero.rate <= percentage.cutoff
logxx <- apply(xx, 2, function(y){log(y + 0.1)})
data <- logxx[round(runif(num)*p), ]
zero.matrix <- xx != 0
logxx_flag <- logxx[flag, ]
imputed <- logxx
weights.list <- list(NULL)
outlier.list <- NULL
j<-1
remain <- data[, -j]
res <- fitting_lasso(data[, j], remain)
coeff <- res$coeff
selected <- res$selected
selected
prior.weight <- calculate_weights(logxx_flag[, j], logxx_flag[, -j][, selected])
prior.weight
sub.selected <- selected[prior.weight >= 10^-4]
sub.prior.weight <- prior.weight[prior.weight >= 10^-4]
sub.prior.weight <- sub.prior.weight/sum(sub.prior.weight)
library(Imputation)
library(Imputation)
library(Imputation)
Imputation3_cpp
library(Imputation)
data(GSE75748_sc_time_course)
dim)gene.expression\
dim(gene.expression )
